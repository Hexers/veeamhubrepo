#! /usr/bin/env python3

# sudo apt-get install python3-dialog python3-pystemd


# these ones seem to be installed already
# sudo apt-get install python3-requests python3-netifaces
import locale
from dialog import Dialog
from pathlib import Path
import json
import re
import subprocess
import shutil
import netifaces
import requests
import pystemd
import psutil
import os
import sys
import time
import configparser
import datetime
import readline
import getpass

#readline for reading arrow keys

# Start menu in home() function at the bottom
# util functions, functions that might be used by different part of the code

# creates a list of all ipv4 address
def myips():
    ipaddr = []
    for nif in netifaces.interfaces():
            if nif != 'lo':
                        for nifaddr in netifaces.ifaddresses(nif)[netifaces.AF_INET]:
                                        ipaddr.append(nifaddr['addr'])
    return ipaddr

def veeamrunning():
    procs = [p for p in psutil.process_iter(['pid', 'name', 'username']) if "veeamtransport" in p.name()]
    return len(procs) > 0

def veeamreposshcheck(username):
    procs = [p for p in psutil.process_iter(['pid', 'name', 'username']) if username in p.username() and "ssh" in p.name()]
    return len(procs) > 0

# Open a file for reading, by default trying to use config reader
# By default nano is set in the config file
# Nano is a bit nicer then the textbox functionality
def readfile(config,d,path):
    if "reader" in config and shutil.which(config["reader"][0]) is not None:
        procrun = config["reader"] + [path]
        subprocess.call(procrun)
    else:
        d.textbox(path,width=80,height=30)
# Open a file for wrting
def openfile(config,d,path):
    if "writer" in config and shutil.which(config["writer"][0]) is not None:
        procrun = config["writer"] + [path]
        subprocess.call(procrun)
    else:
        d.editbox(path,width=80,height=30)

def getsshservice():
    ssh = pystemd.systemd1.Unit(b'ssh.service')
    ssh.load()
    return ssh

def issshon():
    s = getsshservice()
    return s.Unit.ActiveState == b'active'

def ufw_is_inactive():
	ufw = subprocess.run(["ufw", "status"], capture_output=True)
	if ufw.returncode == 0:
		return "inactive" in str(ufw.stdout,"utf-8")
	else:
		raise Exception("ufw feedback not as expected {}".format(ufw.stdout))

def ufw_activate():
	ufw = subprocess.run(["ufw","--force","enable"], capture_output=True)
	if ufw.returncode != 0:
		raise Exception("ufw feedback not as expected {}".format(ufw.stdout))
	else:
		return ufw.stdout

def ufw_ssh(setstatus="deny"):
	ufw = subprocess.run(["ufw",setstatus,"ssh"], capture_output=True)
	if ufw.returncode != 0:
		raise Exception("ufw feedback not as expected {}".format(ufw.stdout))
	else:
		return ufw.stdout


def packagetest(dpkgtest):
	code = 0
	pout = subprocess.run(["dpkg","-s",dpkgtest], capture_output=True)
	if pout.returncode != 0:
		code = -1
	else:
		for ln in str(pout.stdout,"utf-8").split("\n"):
			if re.match("Status: install ok installed",ln):
				code = 1
	return code

def installpackage(d,packagename):
    error = False


    d.infobox("Checking repo's for definitions")
    pout = subprocess.run(["apt-get","update","-y"], capture_output=True) 
    if pout.returncode != 0:
        d.msgbox("Error updating {0}".format(str(pout.stderr,'utf-8')))
        error = True
   
    if not error:
        d.infobox("Installing {}".format(packagename))
        pout = subprocess.run(["apt-get","install",packagename,"-y"], capture_output=True) 
        if pout.returncode != 0:
            d.msgbox("Error updating {0}".format(str(pout.stderr,'utf-8')))
            error = True
    
    return error

def gettimeinfo():
    timeinfo = ["Could not fetch timeinfo"]
    time = ""
    date = ""
    zone = ""
    ntpactive = False
    pout = subprocess.run(["timedatectl","status"], capture_output=True) 
    if pout.returncode == 0:
        timeinfo = []
        for line in str(pout.stdout,'utf-8').split("\n"):
            line = line.strip()
            if line != "":
                tim = re.match("Local time: [A-Za-z]+ ([0-9]{4}-[0-9]{2}-[0-9]{2}) ([0-9]{2}:[0-9]{2}:[0-9]{2})",line)
                if tim:
                    time = tim.group(2)
                    date = tim.group(1)
                else:
                    zm = re.match("Time zone: ([A-Za-z/]+)",line)
                    if zm:
                        zone = zm.group(1)
                    else:
                        ntpm = re.match("NTP service: ([A-Za-z/]+)",line)
                        if ntpm:
                            ntpactive = ntpm.group(1) == "active"
                            
                timeinfo.append(line)

    return timeinfo,time,date,zone,ntpactive

# end of util functions

# Menu 1 Create User
# Check if the user exists by parsing /etc/passwd
def usersexists(user):
    found = False
    with open("/etc/passwd", 'r') as outfile:
        allu = outfile.readlines()
        for u in allu:
            us = u.split(":")
            if us[0] == user:
                found = True

    return found

# the repouser function itself
def setrepouser(config,d):
    code,user = d.inputbox("Confirm your user",init=config["repouser"])
    if code == d.OK:
        if not usersexists(user):
            code = d.yesno("User {0} does not exists, do you want to create it?".format(user))
            if code == d.OK:
                pout = subprocess.run(["useradd","-m",user], capture_output=True) 
                if pout.returncode != 0:
                    d.msgbox("Error creating user {0}".format(str(pout.stderr,'utf-8')))
                    return
                else:
                    code,pwd = d.passwordbox("Enter password for user",insecure=True)
                    pout = subprocess.run(["chpasswd"],input="{}:{}".format(user,pwd).encode('utf-8'),capture_output=True)
                    if pout.returncode != 0:
                        d.msgbox("Error setting passwd {0}".format(str(pout.stderr,'utf-8')))
                        return
                    else:
                        d.msgbox("User created")
        config["repouser"] = user

# Menu 2 Format drive
# Makes a list of candidate drives from lsblk
# Uses recursion to dig deeper
# Drive is candidate if it does not have child partitions / is not mounter / is not a CD 
# In case of children, do the recursion
# I is kept to keep the logical order
def rlsblk(devices,choices,shadow,i):
    for device in devices:
        if not device["mountpoint"] and not "children" in device and not device["maj:min"].split(":")[0] == "11" :
            choices.append((str(i),"{} {}".format(device["path"],device["size"])))
            shadow[i] = device["path"]
            i=i+1
        elif "children" in device:
                i = rlsblk(device["children"],choices,shadow,i)
    return i

# the format function itself
def formatdrive(config,d):
    choices = [("1","Manually define disk")]
    shadow = {1:"/dev/"}
    i = 2

    repoadded = ""

    #lsblk --json -o PATH,MAJ:MIN,NAME,MOUNTPOINT,SIZE
    #output nice json we can parse and includes lvm volumes and disk size
    #proc part only contains phys devices

    trypart = True

    #if lsblk is available, use it, otherwise read /proc/partitions which has less info
    if shutil.which("lsblk") is not None:
        lsout = subprocess.run(["lsblk", "--json", "-o","PATH,MAJ:MIN,NAME,MOUNTPOINT,SIZE"], capture_output=True)
        if lsout.returncode == 0:
            jout = json.loads(lsout.stdout)
            i = rlsblk(jout["blockdevices"],choices,shadow,i)
            trypart = False

    if trypart:
        with open('/proc/partitions','r') as outfile:
            parts = outfile.readlines()
            for part in parts:
                partsplit = re.split("\s+",part.strip())
                if partsplit[0] == "8":
                    #8       16   52428800 sdb
                    choices.append((str(i),"/dev/{}".format(partsplit[3])))
                    shadow[i] = "/dev/{0}".format(partsplit[3])
                    i=i+1
     
    code, tag = d.menu("Which partition do you want to format",choices=choices)
    if code == d.OK:
        code,part = d.inputbox("Confirm your partition",init=shadow[int(tag)])
        if code == d.OK:
            code = d.yesno("Are you sure you want to format {}".format(part))
            if code == d.OK:
                #trying to suggest to make a primary partition on a complete disk
                if re.match("/dev/.d[a-z]$",part):
                    code = d.yesno("{} is a complete disk, do you want me to partition it?".format(part))
                    if code == d.OK:
                        if shutil.which("parted") is not None:
                            pout = subprocess.run(["parted","-s",part,"mklabel","gpt"], capture_output=True)
                            if pout.returncode != 0:
                                d.msgbox("Error {0}".format(str(pout.stderr,'utf-8')))
                                return 1,repoadded
                            else:
                                pout = subprocess.run(["parted","-s",part,"mkpart","primary","0%","100%"], capture_output=True)
                                if pout.returncode != 0:
                                    d.msgbox("Error {0}".format(str(pout.stderr,'utf-8')))
                                    return 1,repoadded
                                else:
                                    part = "{}1".format(part)
                        else:
                            d.msgbox("Parted not found, stopping")
                            return 1,repoadded
 
                time.sleep(1)
                pout = subprocess.run(["mkfs.xfs","-b","size=4096","-m","reflink=1,crc=1",part], capture_output=True)
                if pout.returncode != 0:
                    force = d.yesno("mkfs.xfs failed, do you want me to try to force it?\n{0}".format(str(pout.stderr,'utf-8')),width=80)
                    if force == d.OK:
                        pout = subprocess.run(["mkfs.xfs","-f","-b","size=4096","-m","reflink=1,crc=1",part], capture_output=True)


                if pout.returncode != 0:
                   d.msgbox("Error formatting {0}".format(str(pout.stderr,'utf-8')))
                else:
                    reposug = "/backups/repo{:03d}"
                    repo = "/backups/repo255"
                    found = False
                    i = 1
                    while not found and i < 255:
                        trepo = Path(reposug.format(i))
                        if trepo.is_file() or trepo.is_dir():
                            i = i+1
                        else:
                            repo = trepo
                            found = True
                    code,mountpoint = d.inputbox("Where do you want to mount the repo",init=str(repo))
                    if code == d.OK:
                        p = Path(mountpoint)
                        if p.exists():
                            d.msgbox("Path exists, stopping")
                            return 1,repoadded
                        else:
                            p.mkdir(mode=0o770, parents=True, exist_ok=False)


                            uuid = ""
                            for dbid in Path("/dev/disk/by-uuid/").iterdir():
                                if str(dbid.resolve()) == part:
                                    uuid = dbid

                            if uuid == "":
                                d.msgbox("Can not resolve uuid")
                                return 1,repoadded
                            else:
                                mountline = "\n{} {} xfs defaults 0 0\n".format(str(uuid),mountpoint)
                                with open("/etc/fstab", "a") as fstab:
                                    fstab.write(mountline)

                                pout = subprocess.run(["mount",mountpoint], capture_output=True)
                                if pout.returncode != 0:
                                    d.msgbox("Error mounting {0}".format(str(pout.stderr,'utf-8')))
                                    return 1,repoadded
                                else:
                                    shutil.chown(str(p),config["repouser"],config["repouser"])
                                    d.msgbox("{} mounted and added!".format(mountpoint))
                                    repoadded = mountpoint
                                    return 0,repoadded

    return 0,repoadded


# Menu 3 register the server
def registerserver(config,d):
        forceregister = False
        if veeamrunning():
            c = d.yesno("Veeam Transport Service is already running, do you want to continue")
            if c != d.OK:
                return
            else:
                forceregister = True

        # uses dbus to talk to the service, should be more stable then parsing systemctl output
        # enable ssh when registration starts
        ssh = getsshservice()
        sshstarted = False 
        sshstop = False
        if ssh.Unit.ActiveState != b'active':
            code = d.yesno("SSH is not started, shall I temporarily start it?")
            if code == d.OK:
                ssh.Unit.Start(b'replace')
                sshstarted = True
                sshstop = True
        else:
            sshstarted = True

        # if ufw is on (firewall), enable ssh
        if not ufw_is_inactive():
            ufw_ssh(setstatus="allow")

        #if ssh started, then add a temp sudo file giving the repouser sudo rights
        if sshstarted:
            veeamrepouser = config["repouser"]
            sudofp = "/etc/sudoers.d/90-{}".format(veeamrepouser)
            if not Path(sudofp).exists():
                with open(sudofp, 'w') as outfile:
                    outfile.write("{}   ALL=(ALL:ALL) ALL".format(veeamrepouser))
                os.chmod(sudofp,0o440)        
                timeout = 500
                if 'registertimeout' in config:
                    timeout = config['registertimeout']
                sleeper = 5
                try :
                    while (not veeamrunning() or forceregister) and timeout > 0:
                        lines = ["Go to the backup server and connect with single use cred",
                                "User :",config["repouser"],""
                                "IPs :"]
                        lines = lines + myips() + ["","Repos:"]
                        for repo in config['repositories']:
                            lines.append(repo)
                        if forceregister:
                            lines = lines + ["","Running in forced mode"]
                        lines = lines + ["","CTRL+C to force exit","Auto locking in {} seconds".format(timeout)]
                        d.infobox("\n".join(lines),width=60,height=(len(lines)+10))
                        timeout = timeout-sleeper
                        time.sleep(sleeper)
                    if veeamrunning():
                        while veeamreposshcheck(config["repouser"]) and timeout > 0:
                            d.infobox("Veeam Process detected\nWaiting for SSH to stop or for timeout ({})".format(timeout))
                            timeout = timeout-sleeper
                            time.sleep(sleeper)
                except KeyboardInterrupt:
                    d.infobox("Cleaning up")
                
                #delete sudo file and close ssh after the user 
                Path(sudofp).unlink()
                if sshstop:
                    ssh.Unit.Stop(b'replace')
                
                if not ufw_is_inactive():
                    ufw_ssh(setstatus="deny")
            else:
                d.msgbox("Sudo file already exists, possible breach, please clean up by using sudo rm {0}".format(sudofp))
        else:
            d.msgbox("SSH not started, can not continue")
        

# Menu 4, monitor box
# 4.1
def checkspace(config,d):
    cont = d.OK
    while cont == d.OK:
        ln = ["Repositories:"]
        for repo in config['repositories']:
            stat = shutil.disk_usage(repo)
            #total=53658783744, used=407994368, free=53250789376
            ln.append("{:40} {}% {}GB".format(repo,int(stat.used*10000/stat.total)/100,int(stat.total/1024/1024/1024)))
         
        cont = d.yesno("\n".join(ln),width=60,height=len(ln)+4,yes_label="Refresh",no_label="Cancel")
        print(cont)
# 4.2
def checklogs(config,d):
    code = d.OK
    path = "/var/log/"

    if Path("/var/log/VeeamBackup/").is_dir():
        path = "/var/log/VeeamBackup/"

    while code == d.OK and not Path(path).is_file():
        code, path = d.fselect(path,width=80,height=30)

    if code == d.OK:
        readfile(config,d,path)

# 4.3
def checkproc(config,d):
    cont = d.OK

    procfilter = "veeam"
    while cont == d.OK:
        ln = []
        procs = [p for p in psutil.process_iter(['pid', 'name', 'username']) if procfilter in p.name()]
        if len(procs) > 0:
            for proc in procs:
                ln.append("{} {} {}".format(proc.pid,proc.username(),proc.name()))
        else:
            ln = ["No processes found matching 'veeam'","Did you add this repo?"]
        cont = d.yesno("\n".join(ln),width=60,height=len(ln)+4,yes_label="Refresh",no_label="Cancel")

# 4 main
def monitorrepos(config,d):
        code = d.OK
        while code == d.OK:
            code, tag = d.menu("What do you want to do:",
                       choices=[("1", "Check Disk Space"),
                                ("2", "Check Logs"),
                                ("3", "Show Veeam Processes"),
                                ])
            if code == d.OK:
                if tag == "1":
                    checkspace(config,d)
                elif tag == "2":
                    checklogs(config,d)
                elif tag == "3":
                    checkproc(config,d)
    
# Menu 5, add repo path
def managerepo(config,d):
    updated = False
    code = d.OK
    while code == d.OK:
        code, tag = d.menu("What do you want to do:",
                       choices=[("1", "Add A Repo"),
                                ("2", "Delete A repo"),
                                ])
        if code == d.OK:
            if tag == "1":
                acode,mountpoint = d.inputbox("Which path do you want to add?",init="/backups/repo")
                if acode == d.OK:
                    if not Path(mountpoint).is_dir():
                        d.msgbox("{} is not a path or dir".format(mountpoint))
                    else:
                        d.msgbox("{} added".format(mountpoint))
                        config['repositories'].append(mountpoint)
                        updated = True
            elif tag == "2":
                if len(config['repositories']) == 0:
                    d.msgbox("No repo's added yet")
                else:
                    listrepo = []
                    shadow = {}
                    i = 1
                    for repo in config['repositories']:
                        listrepo.append((str(i),repo))
                        shadow[str(i)] = repo
                        i = i+1
                    dcode, dtag  = d.menu("What repository do you want to remove from config:",choices=listrepo)
                    if dcode == d.OK:
                        config['repositories'].remove(shadow[dtag])
                        updated = True
                    
    return updated

# Menu 6 manage ubuntu
# 6.1 update 
def update(config,d):
    if shutil.which("apt-get") is not None:
        d.infobox("Checking updates...")
        pout = subprocess.run(["apt-get","update","-y"], capture_output=True) 
        if pout.returncode != 0:
            d.msgbox("Error updating {0}".format(str(pout.stderr,'utf-8')))
            return
        d.infobox("Running Update...")
        pout = subprocess.run(["apt-get","upgrade","-y"], capture_output=True) 
        if pout.returncode != 0:
            d.msgbox("Error updating {0}".format(str(pout.stderr,'utf-8')))
            return
        d.infobox("Update Completed")
        time.sleep(1)
    else:
        d.infobox("Apt-get not found, not executing update")
        time.sleep(5)

# 6.2 harden
def disablessh():
    ssh = getsshservice()
    if ssh.Unit.ActiveState == b'active':
        ssh.Unit.Stop(b'replace')
		
    mgr = pystemd.systemd1.Manager()
    mgr.load()
    if len([serv for serv in mgr.Manager.ListUnitFiles() if "sshd" in str(serv[0]) ]) > 0:
        mgr.Manager.DisableUnitFiles([b'sshd.service'],False)
    if not ufw_is_inactive():
        ufw_ssh(setstatus="deny")

def enablefw():
    if ufw_is_inactive():
         ufw_activate()

def harden(config,d):
    code, tag = d.menu("What do you want to do:",
        choices=[("1", "Enable UFW"),
                    ("2", "Stop and disable SSH"),
                    ("3", "Temporarly enable SSH")])
    if code == d.OK:
        if tag == "1":
            enablefw()			
        elif tag == "2":
            disablessh()
        elif tag == "3":
            ssh = getsshservice()
            if ssh.Unit.ActiveState != b'active':
                ssh.Unit.Start(b'replace')
            if not ufw_is_inactive():
                ufw_ssh(setstatus="allow")
            d.msgbox("SSH started but not on reboot\nDo not forget to Stop it again!!",width=60)

# 6.3 time
# 6.3.1 timezone

def configtimezone(config,d):
    code = d.OK
    path = "/usr/share/zoneinfo/"
    while code == d.OK and not Path(path).is_file():
        code, path = d.fselect(path,width=80,height=30)

    if code == d.OK:
        zi = re.match("^/usr/share/zoneinfo/(.*)",path)
        if zi:
            szi = zi.group(1)
            d.msgbox("Time zone set to {0}".format(szi))

            pout = subprocess.run(["timedatectl","set-timezone",szi], capture_output=True) 
            if pout.returncode != 0:
                d.msgbox("Error updating {0}".format(str(pout.stderr,'utf-8')))
            #symlink doesnt want existing
            #os.symlink(path,"/etc/localtime.new")
            #os.rename("/etc/localtime.new","/etc/localtime")
            #with open("/etc/timezone", 'w') as tz:
            #    tz.write(zi.group(1))

        else:
            d.msgbox("Not a time zone file ({0})".format(path))

# 6.3.2 time
def settime(config,d,time,date,zone,ntpactive):
    if ntpactive:
        y = d.yesno("NTP is already active\nShould I temporarily stop it?")
        if y != d.OK:
            return
        else:
            tsd = pystemd.systemd1.Unit(b'systemd-timesyncd.service')
            tsd.load()
            tsd.Unit.Stop(b'replace')
            
    y,nt = d.inputbox("Define time hh:mm:ss({0})".format(zone),init=time)
    if y == d.OK:
        if not re.match("[0-9]{2}:[0-9]{2}:[0-9]{2}",nt):
            d.msgbox("Error matching time, please make sure to use leading zeroes\nGiven : {0}".format(nt))
            return
        else:
            y,nd = d.inputbox("Define date yyyy-mm-dd",init=date)
            if y == d.OK:
                if not re.match("[0-9]{4}-[0-9]{2}-[0-9]{2}",nd):
                    d.msgbox("Error matching date, please make sure to use leading zeroes\nGiven : {0}".format(nd))
                    return
                else:
                    pout = subprocess.run(["timedatectl","set-time","{} {}".format(nd,nt)], capture_output=True) 
                    if pout.returncode != 0:
                        d.msgbox(str(pout.stderr,'utf-8'))

# 6.3.3 ntp
def ntp(config,d):
        if packagetest("systemd-timesyncd") != 1:
            c = d.yesno("Systemd-timesyncd does not seem to be install it\nDo you want to install it?")
            if c != d.OK:
                return
            else:
                if installpackage(d,"systemd-timesyncd"):
                    return

        ntpset = ""
        failoverntp = "ntp.ubuntu.com"

        cfile = "/etc/systemd/timesyncd.conf"
        # timesyncd seems to be a kind of ini file which can be easily parsed. By default it is completely commented out with only the "Time" section
        config = configparser.ConfigParser()
        config.optionxform=str
        config.read(cfile)
        if 'Time' in config.sections():
                if "NTP" in config['Time']:
                    ntpset = config['Time']['NTP']
                if "FallbackNTP" in config['Time']:
                    failoverntp = config['Time']['FallbackNTP']
       
        y,newntpset = d.inputbox("NTP server\n(space seperated)",init=ntpset)
        if y == d.OK:
            y,newfailover = d.inputbox("Failover NTP server\n(space seperated)",init=failoverntp)
            if y == d.OK:
                if newntpset != ntpset or newfailover != failoverntp:
                    shutil.copyfile(cfile, "{}.{}.backup".format(cfile,datetime.datetime.now().strftime("%Y%m%d%H%M%S")))
                    config['Time']['NTP'] = newntpset
                    config['Time']['FallbackNTP'] = newfailover

                    d.infobox("Updating..")
                    with open(cfile, 'w') as configfile:
                           config.write(configfile)


                d.infobox("Reloading timesync service")
                tsd = pystemd.systemd1.Unit(b'systemd-timesyncd.service')
                tsd.load()
                tsd.Unit.Stop(b'replace')
                tsd.Unit.Start(b'replace')
                    
# 6.3 main menu

def managetime(config,d):
        code = d.OK
        while code == d.OK:
            ln,time,date,zone,ntpactive = gettimeinfo()
            ln.append("") 
            ln.append("What do you want to do")
            code, tag = d.menu("\n".join(ln),
                       choices=[("1", "Configure Timezone"),
                                ("2", "Manually Set Time"),
                                ("3", "Configure NTP (timesyncd)")
                                ],height=len(ln)+9)
            if code == d.OK:
                if tag == "1":
                    configtimezone(config,d)
                elif tag == "2":
                    settime(config,d,time,date,zone,ntpactive)
                elif tag == "3":
                    ntp(config,d)


def manageubuntu(config,d):
        code = d.OK
        while code == d.OK:
            code, tag = d.menu("What do you want to do:",
                       choices=[("1", "Update"),
                                ("2", "Harden"),
                                ("3", "Manage Time"),
                                ])
            if code == d.OK:
                if tag == "1":
                    update(config,d)
                elif tag == "2":
                    harden(config,d)
                elif tag == "3":
                    managetime(config,d)

 
# main loop
def saveconfig(cfile,config):
    with open(cfile, 'w') as outfile:
        json.dump(config, outfile)

class DialogWrapper:
    OK=1
    title=""
    Cancel=-1
    style="dialog"

    def __init__(self,title):
        self.title = "VeeamHub Tiny Repo Manager"
        self.dialog = Dialog(dialog="dialog")
        self.dialog.set_background_title(self.title)
        self.OK = self.dialog.OK

    def infobox(self,infotext,width=80,height=10):
        return self.dialog.infobox(infotext,width=width,height=height)
    
    def msgbox(self,infotext,width=80,height=10):
        return self.dialog.msgbox(infotext,width=width,height=height)
   
    def passwordbox(self,infotext,insecure=True):
        return self.dialog.passwordbox(infotext,insecure=insecure)

    def inputbox(self,infotext,init=""):
        return self.dialog.inputbox(infotext,init=init,width=80)

    def yesno(self,question,width=80,height=10,yes_label="yes",no_label="no"):
        return self.dialog.yesno(question,width=80,height=10,yes_label=yes_label,no_label=no_label)
    
    def menu(self,text,choices,height=15,cancel="Cancel"):
        return self.dialog.menu(text,choices=choices,height=height,cancel=cancel)

    def fselect(self,path,width=80,height=20):
        self.msgbox("Easiest way is to type the path while browsing\nUse / as dir seperator\n\nAlternatively try tab+arrow keys to navigate\nand space to copy",width=60)
        return self.dialog.fselect(path,width=width,height=height)


class AlternateDialog(DialogWrapper):
    style="alternate"
    rows=0
    columns=0

    def __init__(self,title,rows,columns):
        self.rows = rows
        self.columns = columns
        DialogWrapper.__init__(self,title)
    
    def header(self):
        print("{}".format(self.title))

    def lnspacer(self):
        dasher = []
        dash = "-"
        for i in range(int(self.columns/4*3)):
            dasher.append(dash)
        print("".join(dasher))

    def cls(self):
        os.system('clear')
        self.rows,self.columns = screensize()
        self.header()
        self.lnspacer()


    def passwordbox(self,infotext,insecure=True):
        self.cls()
        print(infotext)
        self.lnspacer()
        passw = getpass.getpass(prompt="password : ")
        return self.OK,passw


    def infobox(self,infotext,width=80,height=10):
        self.cls()
        print(infotext)
        self.lnspacer()
    
    def yesno(self,question,width=80,height=10,yes_label="yes",no_label="no"):
        code = self.OK
        test = "o"
        while not (test == "" or test == "e"):
            self.cls()
            print(question)
            self.lnspacer()
            test = input("Press enter for {}, enter 'e' for {} : ".format(yes_label,no_label))
        if test == "e":
            code = self.Cancel
        return code

    def msgbox(self,infotext,width=80,height=10):
        self.cls()
        print(infotext)
        self.lnspacer()
        input("Press enter to continue..")
    
    def inputbox(self,infotext,init=""):
        self.cls()
        print(infotext)
        self.lnspacer()
        code = self.OK
        answer = ""
        try:
            answer = input("(default {}, ctrl+c to exit): ".format(init))
            if answer == "":
                answer = init
        except KeyboardInterrupt:
            code = self.Cancel

        return code,answer

    def menu(self,text,choices,height=15,cancel="Cancel"):
        valid = ["e"]
        for c in choices:
            valid.append(c[0])
        
        userinput = ""
        while not userinput in valid:
            self.cls()
            print(text)
            self.lnspacer()
            for c in choices:
                print("{}) {}".format(c[0],c[1]))
            self.lnspacer()
            userinput = input("Please specify choice or 'e' to exit:")

        code = self.OK
        if userinput == "e":
            code = self.Cancel

        return code,userinput
    
            
    def fselect(self,path,width=80,height=20):
        self.cls()
        path = path.rstrip("/")
        print("Current path is {}".format(path))
        filesall = []
        fileindex = {}
        selecti = 1
        for dirwalk in os.walk(path):
            for fwalk in dirwalk[2]:
                localpath = dirwalk[0].replace(path,"")
                fname = fwalk
                if localpath != "":
                    fname = "{}/{}".format(dirwalk[0].replace(path,""),fwalk)
                
                fobject = [fname,"{}/{}".format(dirwalk[0],fwalk),selecti]
                filesall.append(fobject)
                fileindex[selecti]=fobject 
                selecti = selecti+1

        selected = -1
        showing = 0
        maxln = self.rows-5
        if maxln < 15:
            maxln = 20

        search = ""
        
        filteredfiles = filesall

        while selected == -1:
            showingend = showing + maxln
            nextround = showingend
            #if we are the end of the file list
            if showingend >= len(filteredfiles):
                showingend = len(filteredfiles)
                nextround = 0
            
            for i in range(showing,showingend):
                print("{}) {}".format(filteredfiles[i][2],filteredfiles[i][0]))
            

            if search == "":
                print("Use /<search> e.g /myfile to filter for a specific file")
            else:
                print("Current search is {}, use / to reset".format(search))

            selecttest = input("Please number to select or enter for more ({}) : ".format(len(filteredfiles)))
            if selecttest != "":
                if selecttest == "e":
                    return self.Cancel,""
                elif selecttest[0] == "/":
                    search = selecttest[1:].strip()
                    if search == "":
                        filteredfiles = filesall
                    else:
                        filteredfiles = []
                        for f in filesall:
                            if search in f[1]:
                                filteredfiles.append(f)
                    nextround = 0
                else:
                    try:
                        intval = int(selecttest)
                        if intval in fileindex:
                            selected = fileindex[intval]
                    except ValueError:
                            print("Please enter an integer or hit enter to see more")
            
            showing = nextround
        
        fileselected = selected[1]
        code = self.yesno("Selecting {}".format(fileselected))
        
        return code,fileselected


def screensize():
    srows,scolumns = os.popen('stty size','r').read().split()
    return int(srows),int(scolumns)

def home(style="default"):
    # http://pythondialog.sourceforge.net/ following this
    # This is almost always a good thing to do at the beginning of your programs.
    locale.setlocale(locale.LC_ALL, '')

    # config file is made under /etc/veeamhubtinyrepoman
    # mainly keeps the repositories data and the repouser
    cfile = Path('/etc') / "veeamhubtinyrepoman"
    
    #d =  Dialog(dialog="dialog")
    #d.set_background_title("VeeamHub Tiny Repo Manager")

    rows,columns = screensize()

    if rows < 40 or columns < 90:
        print("Switching to alternate dialog style because small terminal (r{},c{}), need at least 40 rows and 90 columns".format(rows,columns))
        print("To avoid this message, resize the terminal or run with -alt flag")
        print("In VMware the console screen might be to small, you can adapt it with vga=791 in grub")
        print("https://askubuntu.com/questions/86561/how-can-i-increase-the-console-resolution-of-my-ubuntu-server")
    
        style="alternate"
        time.sleep(5)
    

    d = 0
    if style == "alternate":
        d = AlternateDialog("Alternate VeeamHub Tiny Repo Manager",rows,columns)
    else:
        d = DialogWrapper("VeeamHub Tiny Repo Manager")


    code = d.OK
    config = {"repouser":"veeamrepo","vbrserver":"","reader":["nano","-v"],"writer":["nano"],"registertimeout":500}

    firstrun = False

    # json file. If it does not exists, it's create with the default settings above
    # if exists, it is read
    if not cfile.is_file():
        d.infobox("Trying to create:\n{}".format(str(cfile)),width=80)
        time.sleep(2)
        firstrun = True
        config['repositories'] = []
        with open(cfile, 'w') as outfile:
                json.dump(config, outfile)
    else:
        with open(cfile, 'r') as outfile:
                config = json.load(outfile)
    

    if firstrun:
        c = d.yesno("This is the first time you started veeamhubrepo\n\nDo you want to run the wizard process?\n\nThis will execute certain actions automatically!",width=60,height=15)
        if c == d.OK:
            setrepouser(config,d)
            saveconfig(cfile,config)

            rcode,mp = formatdrive(config,d)
            if rcode == 0 and mp != "":
                config['repositories'].append(mp)
            saveconfig(cfile,config)

            c = d.yesno("Do you want to configure NTP and the timezone?")
            if c == d.OK:
                configtimezone(config,d)
                ntp(config,d)

            d.infobox("Disabling SSH at startup")
            time.sleep(1)
            disablessh()

            d.infobox("Enabling the firewall")
            time.sleep(1)
            enablefw()

            c = d.yesno("Do you want to try to update the server now?")
            if c == d.OK:
                update(config,d)

            registerserver(config,d)

            

    # while you keep getting ok, keep going
    while code == d.OK:
        updated = False
    
        ln = ["Current IPv4: {}".format(",".join(myips()))]
        if issshon():
            ln.append("! SSH is running !")

        ln.append("")
        ln.append("What do you want to do:")

        # keep structure as it, add new functionality under sub menu so that it doesn't get too big
        code, tag = d.menu("\n".join(ln),
                       choices=[("1", "Set/Create Unprivileged Repo User"),
                                ("2", "Format Drive XFS"),
                                ("3", "Register Hardended Repo"),
                                ("4", "Monitor Repositories"),
                                ("5", "Manages Repo Paths"),
                                ("6", "Manage Ubuntu"),
                                ],height=len(ln)+14,cancel="Exit")
        if code == d.OK:
            if tag == "1":
                setrepouser(config,d)
                updated = True
            elif tag == "2" or tag == "5":
                if usersexists(config["repouser"]):
                    if tag == "2":
                        rcode,mp = formatdrive(config,d)
                        if rcode == 0 and mp != "":
                            config['repositories'].append(mp)
                            updated = True
                    elif tag == "5":
                        updated = managerepo(config,d)
                else:
                    d.msgbox("Please create repo user first")
            elif tag == "3":
                registerserver(config,d)
            elif tag == "4":
                monitorrepos(config,d)
            elif tag == "6":
                manageubuntu(config,d)
            if updated:
                with open(cfile, 'w') as outfile:
                    json.dump(config, outfile)

# cleans output after being done
def main():
    args = sys.argv[1:]
    if "-alt" in args:
        home(style="alternate")
    else:
        home(style="default")

    subprocess.run(["clear"])

if __name__ == "__main__":
    if os.getuid() != 0:
        print("You are running this command as a regular user")
        print("Please use sudo e.g. sudo veeamhubrepo")
        exit(1)
    main()
